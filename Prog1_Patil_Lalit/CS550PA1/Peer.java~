import java.net.*; 
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.io.*;
 
// A client for our Multithreaded SocketServer. 
public class Peer{ 
	
	protected static ServerSocket PeerSocket;
	private static PrintStream os;
	private BufferedReader stdin;
	
	 public Peer(int port) 
	    { 
	        try
	        { 
	        	PeerSocket = new ServerSocket(port); 
	        } 
	        catch(IOException ioe) 
	        { 
	            System.out.println("Could not create peerserver socket on port 4500. Quitting."); 
	            System.exit(-1); 
	        } 
	        
	        while(true) 
	        {                        
	            try
	            { 
	                // Accept incoming connections. 
	                Socket clientSocket1 = PeerSocket.accept();
	                
	                PeerServiceThread cliThread = new PeerServiceThread(clientSocket1);
	                cliThread.start();
	            }catch(IOException ioe) 
	            { 
	                System.out.println("Exception encountered on accept. Ignoring. Stack Trace :"); 
	                ioe.printStackTrace(); 
	            } 
	        }
	    }
	 
	 
	 class PeerServiceThread extends Thread 
	    { 
	        Socket clientSocket1;
	        boolean m_bRunThread = true; 
	        private BufferedReader in = null;
	 
	        public PeerServiceThread() 
	        { 
	            super(); 
	        } 
	 
	        PeerServiceThread(Socket s) 
	        { 
	        	clientSocket1 = s; 
	 
	        } 
	 
	        public void run() 
	        { 
	        }
	    }
	 
	 
    public static void main(String[] args) throws UnknownHostException, IOException
    { 
        // First parameter has to be Server host name or IP address
    	System.out.println(args[0]);
    	if(args[0] == "-p"){
    		new Peer(Integer.parseInt(args[1]));
    	}else if(args[0].trim().equals("-c")){
        
        Socket sock = null; 
        BufferedReader in = null;
        char choice = 1;
    	do{
        	System.out.println("1. Register");
            System.out.println("2. Search file");
            System.out.println("3. Exit");
            System.out.print("\nMake selection: ");
            choice = (char) System.in.read();
            
            
            switch (choice) {
            case '1':
            	sock = new Socket("localhost",Integer.parseInt(args[1]));
                os = new PrintStream(sock.getOutputStream());
                os.println("1");
             // Create the streams to send and receive information 
                BufferedOutputStream bos = new BufferedOutputStream(sock.getOutputStream());
            	DataOutputStream dos = new DataOutputStream(bos); 
                
                File dir = new File("./files");
                File[] filesList = dir.listFiles();
                
                //dos.writeInt(filesList.length);
                os.println(filesList.length);

            	for(File file : filesList)
            	{
            	    String name = file.getName();
            	    //dos.writeUTF(name);
            	    os.println(name);

            	    
            	}
                dos.close();
                break;
            case '2':
            	
            	sock = new Socket("localhost", 11111);
            	BufferedReader stdin = new BufferedReader(new InputStreamReader(
                        sock.getInputStream()));
            	InputStream is = sock.getInputStream();
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
            	os = new PrintStream(sock.getOutputStream());
            	os.println("2");
            	Scanner input = new Scanner(System.in);
        		input.nextLine();	
            	System.out.println("Enter file name: ");
            		
            		String fileName = input.nextLine();
            		os.println(fileName);
            		String message = br.readLine();
            		System.out.println(message);
            		message = br.readLine();
            		System.out.println(message);
            		message = br.readLine();
            		System.out.println(message);
            		System.out.print("\nSelect Peer: ");
                    int peer = System.in.read();
            		os.println(peer);
            		String remoteSocket = br.readLine();
            		System.out.println(remoteSocket);
            	break;
            case '3':
          	  break;
                
        }
        
        }while(choice!='3');
        // Create the socket connection to the IndexServer port 11111 
         
        
                        
        }
    	else{
    		System.out.println("\nInvalid option.\n -p : Peer\n -c : Client");
    	}
    }
    
} 
